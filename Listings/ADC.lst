C51 COMPILER V9.59.0.0   ADC                                                               04/09/2021 20:04:07 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Objects\ADC.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE HARDWARE\ADC\ADC.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\MAIN;.\delay;.\HARDWAR
                    -E\AIP650;.\HARDWARE\GUI;.\HARDWARE\PWM;.\HARDWARE\EEPROM;.\HARDWARE\ADC;.\HARDWARE\UART;.\HARDWARE\IR) DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\ADC.lst) TABS(2) OBJECT(.\Objects\ADC.obj)

line level    source

   1          #include "STC8G.H"
   2          #include <string.h>
   3          #include <stdio.h>
   4          #include <intrins.h>
   5          #include "ADC.h"
   6          #include "main.h"
   7          #include "AIP650.h"
   8          #include "uart.h"
   9          #include "delay.h"
  10          
  11          extern u8 IR_ON;           //是否有人进入
  12          extern u16 ALARM_NUMBER;      //报警人数
  13          extern u8 voiceFlag;       //声音开关
  14          extern u8 dB;         //灵敏度
  15          bit isCountAN = 0;       //是否已经计算本次报警人数
  16          u8 alarmLine = 60;         
  17          u16 ADCResult0;                 
  18          u16 adcCounts;            //计数
  19          u16 alarmCounts;          
  20          
  21          
  22          /*
  23          *@brief      ADC初始化
  24          *@param      adcn       选择ADC通道
  25          *@param      speed      ADC时钟频率
  26          *@return     void
  27          * Sample usage:   adc_init(ADC_P10,ADC_SYSclk_DIV_2);//初始化P1.0为ADC功能,ADC时钟频率：SYSclk/2
  28          */
  29          void adc_init(ADC_SPEED_enum speed)
  30          {
  31   1        P_SW2 |= 0x80;
  32   1        ADCTIM = 0x3f;
  33   1        P_SW2 &= 0x7f;
  34   1        ADC_CONTR |= 1 << 7;  //打开ADC电源   建议在空闲模式和掉电模式前关闭电源
  35   1        ADC_CONTR &= 0xf0;    // 清除ADC_CHS
  36   1        ADCCFG |= speed & 0x0f; //设置 ADC时钟频率 默认 0000 SYSclk/2/1
  37   1        ADCCFG |= 0x20;     //ADCCFG:1101 1110  设置右对齐
  38   1      }
  39          
  40          
  41          
  42          
  43          /*
  44           *  @brief     ADC转换一次
  45           * @param      adcn            选择ADC通道
  46           * @param     resolution      分辨率
  47           * @return    转换结果
  48           * Sample usage: adc_convert(ADC_P10, ADC_10BIT);
  49           */
  50          int adc_once(ADCN_enum adcn, ADCRES_enum resolution)
  51          {
  52   1        u16 adc_value;
  53   1        ADC_CONTR &= 0xf0; //清除ADCCHS(3:0)
C51 COMPILER V9.59.0.0   ADC                                                               04/09/2021 20:04:07 PAGE 2   

  54   1        ADC_CONTR |= adcn; //选择ADC模拟通道
  55   1        ADC_CONTR |= 0x40; //开始ADC转换，转换完成后硬件自动将此位清零
  56   1        _nop_();
  57   1        _nop_();
  58   1        while (!(ADC_CONTR & 0x20));        // 查询 ADC 完成标志
  59   1        ADC_CONTR &= ~0x20; // 清完成标志
  60   1        adc_value = (ADC_RES << 8) | ADC_RESL;
  61   1        adc_value >>= resolution; //取多少位
  62   1        return adc_value;
  63   1      }
  64          
  65          
  66          /**
  67           * @brief  获取当前的ADC转换值
  68           * @note   
  69           * @retval None
  70           */
  71          void ADC()
  72          {
  73   1        if (IR_ON == 1)
  74   1        {
  75   2      
  76   2          u16 ADC_Data0;
  77   2          //float temp;
  78   2          ADC_Data0 = adc_once(ADC_P10, ADC_10BIT);   //采集一次ADC，精度10位
  79   2                                 //temp=(float)4900/(float)1024;
  80   2          //ADCResult0=(u16)(temp*(float)AD_Data0);  计算输出电压
  81   2          // ADCResult0=ADCResult0+ADC_Data0;
  82   2          // ADC_Data0=ADCResult0/adcCounts;
  83   2      
  84   2          if (ADC_Data0 > alarmLine)
  85   2          {
  86   3            if (isCountAN == 0)
  87   3            {
  88   4              isCountAN = 1;
  89   4              ALARM_NUMBER++;
  90   4            }
  91   3          }
  92   2          //UartSendu16(ADC_Data0);
  93   2          //UartSend(0xff);
  94   2          if (ADC_Data0 > alarmLine)
  95   2          {
  96   3            if (alarmCounts<1000)
  97   3            {
  98   4              alarmCounts++;
  99   4              adcCounts=0;
 100   4              if (ADC_Data0 > alarmLine && ADC_Data0 < 200)
 101   4              {
 102   5                LED1 = 0;
 103   5                if (voiceFlag == 0)
 104   5                  BUZZ = 0;
 105   5              }
 106   4              else if (ADC_Data0 > 200 && ADC_Data0 < 400)
 107   4              {
 108   5                LED1 = 0;
 109   5                LED2 = 0;
 110   5                if (voiceFlag == 0)
 111   5                  BUZZ = 0;
 112   5              }
 113   4              else if (ADC_Data0 > 400 && ADC_Data0 < 600)
 114   4              {
 115   5                LED1 = 0;
C51 COMPILER V9.59.0.0   ADC                                                               04/09/2021 20:04:07 PAGE 3   

 116   5                LED2 = 0;
 117   5                LED3 = 0;
 118   5                if (voiceFlag == 0)
 119   5                  BUZZ = 0;
 120   5              }
 121   4              else if (ADC_Data0 > 600 && ADC_Data0 < 800)
 122   4              {
 123   5                LED1 = 0;
 124   5                LED2 = 0;
 125   5                LED3 = 0;
 126   5                LED4 = 0;
 127   5                if (voiceFlag == 0)
 128   5                  BUZZ = 0;
 129   5              }
 130   4              else if (ADC_Data0 > 800 && ADC_Data0 < 1000)
 131   4              {
 132   5                LED1 = 0;
 133   5                LED2 = 0;
 134   5                LED3 = 0;
 135   5                LED4 = 0;
 136   5                LED5 = 0;
 137   5                if (voiceFlag == 0)
 138   5                  BUZZ = 0;
 139   5              }
 140   4              else if (ADC_Data0 > 1000)
 141   4              {
 142   5                LED1 = 0;
 143   5                LED2 = 0;
 144   5                LED3 = 0;
 145   5                LED4 = 0;
 146   5                LED5 = 0;
 147   5                LED6 = 0;
 148   5                if (voiceFlag == 0)
 149   5                  BUZZ = 0;
 150   5              }
 151   4            }
 152   3          }
 153   2          else //当读取ad值小于警戒线 
 154   2          {
 155   3            adcCounts++;
 156   3            alarmCounts++;
 157   3            if (alarmCounts > 1000&&adcCounts>400)
 158   3            {
 159   4              adcCounts = 0;
 160   4              offLED();
 161   4              BUZZ = 1; //关闭蜂鸣器
 162   4              alarmCounts = 0;
 163   4              delay_ms(1000);
 164   4            }
 165   3            
 166   3          }
 167   2        }
 168   1        else if (IR_ON == 0)
 169   1        {
 170   2          //当人走了之后将所有参数复位
 171   2          alarmCounts = 0;
 172   2          adcCounts = 0;
 173   2          ADCResult0 = 0;
 174   2          isCountAN = 0;
 175   2          offLED();
 176   2          BUZZ = 1; //关闭蜂鸣器
 177   2        }
C51 COMPILER V9.59.0.0   ADC                                                               04/09/2021 20:04:07 PAGE 4   

 178   1      }
 179          
 180          /*
 181           功能描述：熄灭所有的LED灯
 182          */
 183          void offLED()
 184          {
 185   1        LED1 = 1;
 186   1        LED2 = 1;
 187   1        LED3 = 1;
 188   1        LED4 = 1;
 189   1        LED5 = 1;
 190   1        LED6 = 1;
 191   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    456    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
